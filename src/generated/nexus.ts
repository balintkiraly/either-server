/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../utils/context"
import * as photon from "@prisma/photon"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateAnswerInput: { // input type
    answer: NexusGenEnums['AnswerEnum']; // AnswerEnum!
    questionID: string; // String!
  }
  CreateQuestionInput: { // input type
    content: string; // String!
    optionA: string; // String!
    optionB: string; // String!
  }
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  RegisterInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
  AnswerEnum: photon.AnswerEnum
}

export interface NexusGenRootTypes {
  Answer: photon.Answer;
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Query: {};
  Question: photon.Question;
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CreateAnswerInput: NexusGenInputs['CreateAnswerInput'];
  CreateQuestionInput: NexusGenInputs['CreateQuestionInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  RegisterInput: NexusGenInputs['RegisterInput'];
  AnswerEnum: NexusGenEnums['AnswerEnum'];
}

export interface NexusGenFieldTypes {
  Answer: { // field return type
    answer: NexusGenEnums['AnswerEnum']; // AnswerEnum!
    id: string; // ID!
    question: NexusGenRootTypes['Question']; // Question!
    user: NexusGenRootTypes['User']; // User!
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    createAnswer: NexusGenRootTypes['Answer']; // Answer!
    createQuestion: NexusGenRootTypes['Question']; // Question!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    register: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    randomQuestion: NexusGenRootTypes['Question']; // Question!
  }
  Question: { // field return type
    content: string; // String!
    id: string; // ID!
    optionA: string; // String!
    optionACount: number; // Int!
    optionB: string; // String!
    optionBCount: number; // Int!
  }
  User: { // field return type
    answers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    email: string; // String!
    id: string; // ID!
    name: string | null; // String
    questions: NexusGenRootTypes['Question'][]; // [Question!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAnswer: { // args
      data: NexusGenInputs['CreateAnswerInput']; // CreateAnswerInput!
    }
    createQuestion: { // args
      data: NexusGenInputs['CreateQuestionInput']; // CreateQuestionInput!
    }
    login: { // args
      data: NexusGenInputs['LoginInput']; // LoginInput!
    }
    register: { // args
      data: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
  }
  User: {
    answers: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    questions: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Answer" | "AuthPayload" | "Mutation" | "Query" | "Question" | "User";

export type NexusGenInputNames = "CreateAnswerInput" | "CreateQuestionInput" | "LoginInput" | "RegisterInput";

export type NexusGenEnumNames = "AnswerEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}